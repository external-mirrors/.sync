name: Sync

on:
  workflow_dispatch:
    # inputs:
    #   repo:
    #     type: string
    #     description: 'Target repo'
    #     required: false
    #     default: ''

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          # owner: ${{ github.repository_owner }}
          owner: external-mirrors

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Sync
        run: |
          # set -x

          sudo mkdir /mnt/sync
          sudo chown runner:runner -R /mnt/sync

          # git config user.name "github-actions[bot]"
          # git config user.email "github-actions[bot]@users.noreply.github.com"

          cp repos.json /mnt/sync/repos.json
          cd /mnt/sync
          jq -c '.[]' repos.json | while read -r config; do
            url=$(echo "$config" | jq -r '.url')
            type=$(echo "$config" | jq -r '.type')
            repo=$(echo "$config" | jq -r '.repo')

            echo "target: $repo"

            mkdir "$repo" && pushd "$repo"

            echo "[$repo] Compare remotes"
            git ls-remote --quiet --heads --tags --refs "$url" > remote-src
            git ls-remote --quiet --heads --tags --refs "https://github.com/external-mirrors/$repo" > remote-dist
            set +e
            diff remote-src remote-dist > /dev/null
            res="$?"
            if [ "$res" -eq 0 ]; then
              set -e
              echo "[$repo] Mirror is synchronized. skip"
              popd
              continue
            fi
            set -e

            echo "[$repo] Cloning source repo"
            mkdir repo-dir && pushd repo-dir
            git clone --filter=blob:none --mirror "$url" .
            git remote set-url --push origin "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/external-mirrors/$repo"
            echo "[$repo] Pushing to mirror repo"
            git push origin 'refs/heads/*:refs/heads/*' 'refs/tags/*:refs/tags/*'
            popd
            echo "[$repo] Cleaning"
            rm -rf repo-dir remote-src remote-dist
            popd
          done
