name: Sync

on:
  workflow_dispatch:
    # inputs:
    #   repo:
    #     type: string
    #     description: 'Target repo'
    #     required: false
    #     default: ''
  schedule:
    - cron: '38 */1 * * *'

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          # owner: ${{ github.repository_owner }}
          owner: external-mirrors

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Sync
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # set -x
          set -m
          MAX_JOBS=3

          echo "===== 'df -h' ====="
          df -h
          echo "==================="

          sudo mkdir /mnt/sync
          sudo chown runner:runner -R /mnt/sync

          cp repos.json /mnt/sync/repos.json
          cd /mnt/sync
          jq -c '.[]' repos.json | while IFS= read -r config; do
            export config

            while [ "$(jobs -rp | wc -l)" -ge "$MAX_JOBS" ]; do
              sleep 0.1
            done

            {
              url=$(echo "$config" | jq -r '.url')
              type=$(echo "$config" | jq -r '.type')
              repo=$(echo "$config" | jq -r '.repo')
              private=$(echo "$config" | jq -r '.private')
              first="0"
              ignore_heads="$(echo -n "$config" | jq -r 'try .ignore.heads[] catch empty')"
              ignore_tags="$(echo -n "$config" | jq -r 'try .ignore.tags[] catch empty')"
  
              echo "target: $repo"
  
              mkdir "$repo" && cd "$repo"
  
              echo "[$repo] Check if the mirror repository is created"
              set +e
              gh repo view "external-mirrors/$repo" > /dev/null
              ret="$?"
              set -e
              if [ "$ret" -ne 0 ]; then
                echo "[$repo] Creating target repo"
                if [ "$private" = true ]; then
                  gh repo create "external-mirrors/$repo" --homepage "$url" --disable-issues --disable-wiki --private
                else
                  gh repo create "external-mirrors/$repo" --homepage "$url" --disable-issues --disable-wiki --public
                fi
                first="1"
              fi
  
              echo "[$repo] Compare remotes"
              git ls-remote --quiet --heads --tags "$url" | grep -Evf <(echo -n "$ignore_heads" | sed -e 's/^/\trefs\/heads\//' -e 's/$/$/') | grep -Evf <(echo -n "$ignore_tags" | sed -e 's/^/\trefs\/tags\//' -e 's/$/(\\^\\{\\})?$/') > remote-src
              git ls-remote --quiet --heads --tags "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/external-mirrors/$repo" > remote-dist
              set +e
              diff remote-src remote-dist > /dev/null
              ret="$?"
              set -e
              if [ "$ret" -eq 0 ]; then
                echo "[$repo] Mirror is synchronized. skip"
                cd /mnt/sync
                # continue
                exit
              fi
  
              echo "[$repo] Cloning source repo"
              mkdir repo-dir && cd repo-dir
              git init --bare
              git remote add --mirror=fetch origin "$url"
  
              git config unset --all remote.origin.fetch
  
              git config set --append remote.origin.fetch '+refs/heads/*:refs/heads/*'
              echo -n "$ignore_heads" | while IFS= read -r ignore_name; do
                git config set --append remote.origin.fetch "^refs/heads/$ignore_name"
              done
  
              git config set --append remote.origin.fetch '+refs/tags/*:refs/tags/*'
              # Negative refspecs for tags are not supported
              # echo -n "$ignore_tags" | while IFS= read -r ignore_name; do
              #   git config set --append remote.origin.fetch "^refs/tags/$ignore_name:refs/tags/$ignore_name"
              # done
  
              git remote set-url --push origin "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/external-mirrors/$repo"
              if [ "$first" -eq 0 ]; then
                git fetch --filter=blob:none
              else
                echo "[$repo] First time sync. full cloning"
                git fetch
              fi
  
              if [ "$ignore_tags" != "" ]; then
                echo "[$repo] removing ignored tags"
                set +e
                git tag -d $(echo -n "$config" | jq -r 'try .ignore.tags[] catch empty')
                set -e
              fi
  
              echo "[$repo] Pushing to mirror repo"
              git push --mirror origin
              gh repo edit "external-mirrors/$repo" --default-branch "$( git remote show origin | grep "^  HEAD branch: " | cut -c 16- )"
              cd ..
              echo "[$repo] Cleaning"
              rm -rf repo-dir remote-src remote-dist
              # cd ..
            }&
          done

          echo "Waiting for all jobs to complete"
          sleep 0.1
          echo "===== jobs ====="
          jobs
          echo "================"
          wait
          echo "done"
